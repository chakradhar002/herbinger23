1a :- Display the first and last names of all actors from the table actor

=>

select
  first_name,
  last_name
from
  actor;
-----------------------------------------------------------------
1b. Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name.

=> 

select
  upper(concat(first_name, last_name)) as name
from
  actor;

--------------------------------------------------------
2a. You need to find the ID number, first name, and last name of an actor, 
of whom you know only the first name, "Joe." What is one query would you use to obtain this information?

=> 

select 
  actor_id, 
  first_name, 
  last_name 
from 
  actor 
where 
  first_name = 'Joe';

-----------------------------------------------------------------------------------
2b. Find all actors whose last name contain the letters GEN:

=>

select 
  * 
from 
  actor 
where 
  last_name like '%GEN%';

------------------------------------------------------------------------------
2c. Find all actors whose last names contain the letters LI. This time, order the rows by last name and first name, in that order:

=> 

select 
  * 
from 
  actor 
where 
  last_name like '%LI%' 
order by 
  last_name, 
  first_name;

----------------------------------------------------------------------------------
2d. Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China:

=> 

select 
  country_id, 
  country 
from 
  country 
where 
  country in (
    'Afghanistan', 'Bangladesh', 'China'
  );

-------------------------------------------------------------------------------------------------
3a. Add a middle_name column to the table actor. 
Position it between first_name and last_name. Hint: you will need to specify the data type.

mysql> 

ALTER TABLE 
  actor 
ADD 
  COLUMN middle_name char(20) 
AFTER 
  first_name;

----------------------------------------------------------------------------------------
3b. You realize that some of these actors have tremendously long last names.
Change the data type of the middle_name column to blobs.

mysql> 

alter table 
  actor modify middle_name blob;

--------------------------------------------------------------
3c. Now delete the middle_name column.

mysql> 

alter table 
  actor 
drop 
  column middle_name;

-------------------------------------------------------------------------------------
4a. List the last names of actors, as well as how many actors have that last name.

mysql> 

select 
  last_name, 
  count(actor_id) 
from 
  actor 
group by 
  last_name;

---------------------------------------------------------------------------------------------
4b. List last names of actors and the number of actors who have that last name, 
but only for names that are shared by at least two actors

mysql> 

select 
  last_name, 
  count(actor_id) 
from 
  actor 
group by 
  last_name 
having 
  count(actor_id)>= 2;

---------------------------------------------------------------------------------------------------------------
4c. Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS, 
the name of Harpo's second cousin's husband's yoga teacher. Write a query to fix the record.

mysql> 

update 
  actor 
set 
  first_name = 'HARPO' 
where 
  first_name = 'GROUCHO';

----------------------------------------------------------------------------------------------------
4d. Perhaps we were too hasty in changing GROUCHO to HARPO. 
It turns out that GROUCHO was the correct name after all! In a single query, if the first name of the actor is currently HARPO, change it to GROUCHO. 
Otherwise, change the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the grievous error. 
BE CAREFUL NOT TO CHANGE THE FIRST NAME OF EVERY ACTOR TO MUCHO GROUCHO, HOWEVER! (Hint: update the record using a unique identifier.)

mysql>

UPDATE 
  actor 
SET 
  first_name = CASE WHEN first_name = 'HARPO' THEN 'GROUCHO' ELSE 'MUCHO GROUCHO' END;

---------------------------------------------------------------------------------------------------------------
5a. You cannot locate the schema of the address table. Which query would you use to re-create it?

mysql> 

create table address(
  address_id int primary key auto_increment, 
  address1 text, 
  address2 text, 
  city char(30), 
  postal_code int
);

-------------------------------------------------------------------------------------------------------------------------------------
6a. Use JOIN to display the first and last names, as well as the address, of each staff member. Use the tables staff and address:

mysql>

select 
  staff.first_name, 
  staff.last_name, 
  address.address 
from 
  staff, 
  address 
where 
  staff.address_id = address.address_id;

-----------------------------------------------------------------------------------------------------------------------
6b. Use JOIN to display the total amount rung up by each staff member in August of 2005. Use tables staff and payment.

mysql>

select 
  staff.first_name, 
  staff.last_name, 
  count(payment.payment_id) as count, 
  payment.payment_date 
from 
  staff, 
  payment 
where 
  staff.staff_id = payment.staff_id 
  and Extract(
    YEAR 
    from 
      payment.payment_date
  )= 2005 
  and Extract(
    Month 
    from 
      payment.payment_date
  )= 8 
group by 
  staff.first_name;

------------------------------------------------------------------------------------------------------------
6c. List each film and the number of actors who are listed for that film. Use tables film_actor and film. Use inner join.

mysql>

select 
  f.title, 
  count(fa.actor_id) 
from 
  film as f, 
  film_actor as fa 
where 
  f.film_id = fa.film_id 
group by 
  f.title;

-----------------------------------------------------------------------------------------------------------------
6d. How many copies of the film Hunchback Impossible exist in the inventory system?

mysql>

select 
  title, 
  count(*) 
from 
  film 
where 
  title = 'Hunchback Impossible' 
group by 
  title;

-----------------------------------------------------------------------------------------------------------------
6e. Using the tables payment and customer and the JOIN command, list the total paid by each customer. List the customers alphabetically by last name:

mysql>

select 
  last_name, 
  sum(amount) as spend 
from 
  payment as pay, 
  customer as cust 
where 
  pay.customer_id = cust.customer_id 
group by 
  last_name;

-----------------------------------------------------------------------------------------------------------------
7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence.
 As an unintended consequence, films starting with the letters K and Q have also soared in popularity.
 Use subqueries to display the titles of movies starting with the letters K and Q whose language is English.

mysql>
	
SELECT 
  title 
FROM 
  film, 
  language 
WHERE 
  film.language_id = language.language_id 
  and name = "English" 
  and title LIKE "K%" 
  OR title LIKE "Q%";

-----------------------------------------------------------------------------------------------------------------
7b. Use subqueries to display all actors who appear in the film Alone Trip.

mysql>  

select 
  first_name, 
  last_name 
from 
  actor 
where 
  actor_id in (
    select 
      actor_id 
    from 
      film_actor 
    where 
      film_id in (
        select 
          film_id 
        from 
          film 
        where 
          title = 'Alone Trip'
      )
  );

-----------------------------------------------------------------------------------------------------------------
7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses of all Canadian customers. Use joins to retrieve this information.

mysql>	

select 
  first_name, 
  email 
from 
  customer as cust, 
  address as ads, 
  city as ct, 
  country as cn 
where 
  cust.address_id = ads.address_id 
  and ads.city_id = ct.city_id 
  and ct.country_id = cn.country_id 
  and country = 'Canada';

-----------------------------------------------------------------------------------------------------------------
7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion. Identify all movies categorized as famiy films.

mysql>  

select 
  fm.title, 
  cat.name 
from 
  film as fm, 
  category as cat, 
  film_category as fc 
where 
  fm.film_id = fc.film_id 
  and fc.category_id = cat.category_id 
  and cat.name = 'Family';

------------------------------------------------------------------------------------------------------------------------------------
7e. Display the most frequently rented movies in descending order.

mysql> 

select 
  title, 
  rental_duration 
from 
  film 
order by 
  rental_duration desc 
limit 
  5;

-------------------------------------------------------------------------------------------------------------
7f. Write a query to display how much business, in dollars, each store brought in.

mysql>

select 
  store, 
  total_sales / 80 as sales_in_doller 
from 
  sales_by_store;

----------------------------------------------------------------------------------
7g. Write a query to display for each store its store ID, city, and country.

mysql>  

select 
  store_id, 
  city, 
  country 
from 
  store as s, 
  address as a, 
  country as cn, 
  city as c 
where 
  s.address_id = a.address_id 
  and a.city_id = c.city_id 
  and c.country_id = cn.country_id;

------------------------------------------------------------------------------------------------------------------
7h. List the top five genres in gross revenue in descending order. (Hint: you may need to use the following tables: category, film_category, inventory, payment, and rental.)

mysql>
  
SELECT 
  c.name as name, 
  SUM(p.amount) AS "Gross" 
FROM 
  category c, 
  film_category fc, 
  inventory i, 
  rental r, 
  payment p 
where 
  c.category_id = fc.category_id 
  and fc.film_id = i.film_id 
  and i.inventory_id = r.inventory_id 
  and r.rental_id = p.rental_id 
GROUP BY 
  c.name 
ORDER BY 
  Gross 
LIMIT 
  5;
----------------------------------------------------------------------------------------------------------------------------------------
8a. In your new role as an executive, you would like to have an easy way of viewing the Top five genres by gross revenue.
    Use the solution from the problem above to create a view. 
    If you haven't solved 7h, you can substitute another query to create a view.
	
mysql>

create view gross as 
SELECT 
  c.name AS name, 
  SUM(p.amount) AS "Gross" 
FROM 
  category c, 
  film_category fc, 
  inventory i, 
  rental r, 
  payment p 
where 
  c.category_id = fc.category_id 
  and fc.film_id = i.film_id 
  and i.inventory_id = r.inventory_id 
  and r.rental_id = p.rental_id 
GROUP BY 
  c.name 
ORDER BY 
  Gross 
LIMIT 
  5;

--------------------------------------------------------------------------------------------------------
8b. How would you display the view that you created in 8a?

mysql> select * from gross;
---------------------------------------------------
8c. You find that you no longer need the view top_five_genres. Write a query to delete it.

mysql> drop view gross;
============================================================================================================

    
