1a. Display the first and last names of all actors from the table actor.
:-Select first_name , last_name from actors

1b. Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name.
:-Select concat(upper(first_name),' ',upper(last_name)) as 'Actor Name'
	from actor;

2a. You need to find the ID number, first name, and last name of an actor, of whom you know only the first name, "Joe." What is one query would you use to obtain this information?
:-select actor_id, first_name, last_name from actor where first_name = 'joe';

2b. Find all actors whose last name contain the letters GEN:
:-select first_name, last_name from actor where last_name like '%GEN%';

2c. Find all actors whose last names contain the letters LI. This time, order the rows by last name and first name, in that order:
:-select first_name , last_name from actor where last_name like '%LI% order by last_name , first_name;

2d. Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China:
:-select country_id , country from country where country in ('Afganistan','Bangaladesh','China');

3a. Add a middle_name column to the table actor. Position it between first_name and last_name. Hint: you will need to specify the data type.
:-Alter table actor add middle_name varchar(25) after last_name ;

3b. You realize that some of these actors have tremendously long last names. Change the data type of the middle_name column to blobs.
:-Alter table actor
modify middle_name blob:

3c. Now delete the middle_name column.
:-Alter table actor drop middle_name;
	

4a. List the last names of actors, as well as how many actors have that last name.
:-select last_name , count(last_name) as count from actor group by last_name ;

4b. List last names of actors and the number of actors who have that last name, but only for names that are shared by at least two actors
:-select last_name , count(last_name) as count from actor group by last_name having count(last_name) > 1  ;

4c. Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS, the name of Harpo's second cousin's husband's yoga teacher. Write a query to fix the record.
:-update actor set first_name = 'HARPO' where first_name = 'Groucho' and last_name = 'Williams';

4d. Perhaps we were too hasty in changing GROUCHO to HARPO. It turns out that GROUCHO was the correct name after all! In a single query, if the first name of the actor is currently HARPO, change it to GROUCHO. Otherwise, change the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the grievous error. BE CAREFUL NOT TO CHANGE THE FIRST NAME OF EVERY ACTOR TO MUCHO GROUCHO, HOWEVER! (Hint: update the record using a unique identifier.)
:-update actor set first_name='groucho' where first_name='Harpo' ;
update actor set first_name = 'HARPO' where first_name = 'Groucho' and last_name = 'Williams';

5a. You cannot locate the schema of the address table. Which query would you use to re-create it?
:-
create table address1 (id integer(11) NOT NULL auto_increment,
    		address varchar(30) NOT NULL,
    		district varchar(30) NOT NULL,
    		city_id integer(11) NOT NULL,
            city varchar(12) NOT NULL,
            state varchar(12) NOT NULL,
            pincode integer(6) NOT NULL, PRIMARY KEY (id))
            

6a. Use JOIN to display the first and last names, as well as the address, of each staff member. Use the tables staff and address:
:-select staff.first_name,staff.last_name address.address from staff join address on address.address_id=staff.address_id

6b. Use JOIN to display the total amount rung up by each staff member in August of 2005. Use tables staff and payment.
:-SELECT staff.first_name, staff.last_name, SUM(payment.amount) FROM staff INNER JOIN payment ON payment.staff_id = staff.staff_id WHERE MONTH(payment.payment_date) = 08 AND YEAR(payment.payment_date) = 2005
GROUP BY staff.staff_id;

6c. List each film and the number of actors who are listed for that film. Use tables film_actor and film. Use inner join.
:-select film.title, count(film_actors.actor_id) as ' Actors count'
from film join film_actor	on film.film_id = film_actor.film_id group by film.title;

6d. How many copies of the film Hunchback Impossible exist in the inventory system?
:-select title, count(inventory_id) from film
 join inventory using (film_id) where title='Hunchback Impossible'
 group by title;
6e. Using the tables payment and customer and the JOIN command, list the total 
paid by each customer. List the customers alphabetically by last name:
:-select c.first_name,c.last_name,sum(p.amount) from payment as p join customer 
 as c on p.customer_id=c.customer_id group by c.customer_id
 order by c.last_name
7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence. As an unintended consequence, films starting with the letters K and Q have also soared in popularity. Use subqueries to display the titles of movies starting with the letters K and Q whose language is English.
:-SELECT title
 FROM film
 WHERE title LIKE 'K%'
OR title LIKE 'Q%'
 AND language_id IN
 (
 SELECT language_id
 FROM language
 WHERE name = 'English'
);
7b. Use subqueries to display all actors who appear in the film Alone Trip.
:-SELECT first_name, last_name
FROM actor 
WHERE actor_id IN 
(
  SELECT actor_id
  FROM film_actor
  WHERE film_id = 
  (
     SELECT film_id
     FROM film
     WHERE title = 'Alone Trip'
    )
 );
7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses of all Canadian customers. Use joins to retrieve this information.
:-SELECT first_name, last_name, email, country
 FROM customer cus
 JOIN address a
 ON (cus.address_id = a.address_id)
 JOIN city cit
 ON (a.city_id = cit.city_id)
 JOIN country ctr
 ON (cit.country_id = ctr.country_id)
 WHERE ctr.country = 'canada';
7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion. Identify all movies categorized as famiy films.
:-select film.title as 'film Title'
	from film
	join film_category on film_category.film_id = film.film_id
	join category  on category.category_id = film_category.category_id
	where category.name = 'Family';
7e. Display the most frequently rented movies in descending order.

:-SELECT title, COUNT(inventory_id) AS '# of copies'
 FROM film
 INNER JOIN inventory
 USING (film_id)
 WHERE title = 'Hunchback Impossible'
 GROUP BY title;

7f. Write a query to display how much business, in dollars, each store brought in.
:-SELECT s.store_id, SUM(amount) AS Gross FROM payment p JOIN rental r
 ON (p.rental_id = r.rental_id)
 JOIN inventory i
 ON (i.inventory_id = r.inventory_id)
 JOIN store s
 ON (s.store_id = i.store_id)
 GROUP BY s.store_id;	
7g. Write a query to display for each store its store ID, city, and country.
:-SELECT store_id, city, country
 FROM store as s
 JOIN address as a 
 ON (s.address_id=a.address_id)
 JOIN city as c 
 ON (a.city_id=c.city_id)
 JOIN  country 
 ON (c.country_id=country.country_id);

7h. List the top five genres in gross revenue in descending order. (Hint: you may need to use the following tables: category, film_category, inventory, payment, and rental.)
:-Select sum(amount) as Total , c.name as Generes from payment as p 
 join rental as r on p.rental_id=r.rental_id join inventory as i
on r.inventory_id=i.inventory_id join film_category as fc on
 i.film_id=fc.film_id join category as c on 
 fc.category_id=c.category_id group by c.name
order by sum(amount) desc limit 5;

8a. In your new role as an executive, you would like to have an easy way of viewing the Top five genres by gross revenue. Use the solution from the problem above to create a view. If you haven't solved 7h, you can substitute another query to create a view.
:-
create view top_five_genres AS
 select SUM(amount) AS 'Total Sales', c.name AS 'Genre'
 from payment p
 join rental r
 on (p.rental_id = r.rental_id)
 JOIN inventory i
 ON (r.inventory_id = i.inventory_id)
 join film_category fc
 ON (i.film_id = fc.film_id)
 JOIN category c
 on (fc.category_id = c.category_id)
 group by c.name
 order by SUM(amount) desc
 limit 5;
8b. How would you display the view that you created in 8a?
:-SELECT * FROM top_five_genre_revenue;

8c. You find that you no longer need the view top_five_genres. Write a query to delete it.
:-drop view top_five_genre_revenue;